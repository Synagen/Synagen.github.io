[
  {
    "objectID": "WesAnderson_or_DavidLynch.html",
    "href": "WesAnderson_or_DavidLynch.html",
    "title": "Who Directed That?",
    "section": "",
    "text": "from fastbook import *\nfrom fastai.vision import *\nfrom fastai.vision.widgets import *\nfrom decouple import config, AutoConfig\n\n\n\n\nconfig = AutoConfig(' ')\nkey = config('AZURE_SEARCH_KEY')\n\n\nresults = search_images_bing(key, 'wes anderson bottle rocket scene')\nims = results.attrgot('contentUrl')\nlen(ims)\n\n145\n\n\n\ndest = 'images/bottlerocket.jpg'\ndownload_url(ims[0], dest)\n\n\n\n\n\n\n    \n      \n      100.09% [2531328/2529007 00:02&lt;00:00]\n    \n    \n\n\nPath('images/bottlerocket.jpg')\n\n\n\nim = Image.open(dest)\nim.to_thumb(512,512)\n\n\n\n\n\nwa_movies_train = ['bottle rocket','rushmore','the royal tenebaums', 'the life aquatic with steve zissou',\n            'the darjeeling limited','the grand budapest hotel','asteroid city']\nwa_movies_val = ['the french dispatch','moonrise kingdom',]\n\ndl_movies_train = ['eraserhead','the elephant man','wild at heart',\n            'twin peaks','lost highway','inland empire']\ndl_movies_val = ['mulholland drive','blue velvet',]\n\npath = Path('movies')\n\n\nif not path.exists():\n    path.mkdir()\ntrain_path = (path/'training')\nif not train_path.exists():\n    train_path.mkdir()\n    for o in wa_movies_train:\n        dest = (train_path/'wesanderson')\n        dest.mkdir(exist_ok=True)\n        results = search_images_bing(key, f'wes anderson {o} scene', max_images=30)\n        download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nfor o in dl_movies_train:\n    dest = (train_path/'davidlynch')\n    dest.mkdir(exist_ok=True)\n    results = search_images_bing(key, f'david lynch {o} scene', max_images=30)\n    download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nval_path = (path/'validation')\nif not val_path.exists():\n    val_path.mkdir()\n    for o in wa_movies_val:\n        dest = (val_path/'wesanderson')\n        dest.mkdir(exist_ok=True)\n        results = search_images_bing(key, f'wes anderson {o} scene', max_images=30)\n        download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nfor o in dl_movies_val:\n    dest = (val_path/'davidlynch')\n    dest.mkdir(exist_ok=True)\n    results = search_images_bing(key, f'david lynch {o} scene', max_images=30)\n    download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nfns = get_image_files(path)\nfns\n\n(#496) [Path('movies/training/davidlynch/f921cd00-d30c-4f7d-aef7-113690751300.png'),Path('movies/training/davidlynch/8a260340-4743-48bf-9c17-b79ff510fb33.jpg'),Path('movies/training/davidlynch/c0e96632-e024-45a1-a962-e24bdd6a3309.jpg'),Path('movies/training/davidlynch/b9d4df96-874b-4ea8-bbfd-17117687f1f4.png'),Path('movies/training/davidlynch/866b49e4-5f9b-4210-968f-b844fea2fa82.jpg'),Path('movies/training/davidlynch/bab863b6-6af3-4237-83d1-c6a3261d3a59.jpg'),Path('movies/training/davidlynch/3186b311-112f-4e01-8eaa-f1d7c56bd6c4.jpg'),Path('movies/training/davidlynch/75fc8e5d-cbbc-41a4-85fb-4efb99d3d4ed.jpg'),Path('movies/training/davidlynch/a0498206-ca77-4016-a80f-78bcab06819f.png'),Path('movies/training/davidlynch/e63f7b05-0fbd-4296-90e5-b97a7c953a4e.jpeg')...]\n\n\n\nfailed = verify_images(fns)\nfailed\n\n(#25) [Path('movies/training/davidlynch/0c7c65c3-5815-49c2-afbd-377c581d0faa.jpg'),Path('movies/training/davidlynch/62dce7bc-9f0e-4028-8fab-89c409e0795a.jpg'),Path('movies/training/davidlynch/eb6e3f70-1533-40ba-954a-09b5d3447380.jpg'),Path('movies/training/davidlynch/94fec574-28da-476e-84f4-dc42357478ba.jpg'),Path('movies/training/davidlynch/ceac1e3e-c6a5-415d-8f07-60cea856a10b.png'),Path('movies/training/davidlynch/d4764947-8917-4891-8a55-e93769a2b857.jpg'),Path('movies/training/wesanderson/a13f7bc0-46b5-4d30-80e8-358d6d5fa3f5.jpg'),Path('movies/training/wesanderson/da038b25-9618-4333-a383-54f6fd83b5d0.png'),Path('movies/training/wesanderson/8c7d6d80-bd4e-40ba-972e-fc3a67d4ade3.jpg'),Path('movies/training/wesanderson/9b54ba25-09b2-4e27-aae7-c58e5179019d.jpg')...]\n\n\n\nfailed.map(Path.unlink);\n\n\n\n\n\nscenes = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=GrandparentSplitter(train_name='training', valid_name='validation'),\n    get_y=parent_label,\n    item_tfms=Resize(256))\n\n\ndl_train = scenes.dataloaders(path, shuffle=True, val_shuffle=True)\n\n\ndl_train.train.show_batch(max_n=8, nrows=2)\n\n\n\n\n\nlearn = vision_learner(dl_train, resnet18, metrics=accuracy)\nlearn.fine_tune(6)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.212527\n0.817278\n0.495327\n00:09\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.611247\n0.270730\n0.495327\n00:10\n\n\n1\n0.519467\n0.258872\n0.495327\n00:10\n\n\n2\n0.393548\n0.240702\n0.495327\n00:10\n\n\n3\n0.316292\n0.261107\n0.495327\n00:10\n\n\n4\n0.259264\n0.272926\n0.495327\n00:10\n\n\n5\n0.222529\n0.273436\n0.495327\n00:10\n\n\n\n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLetâ€™s remove any shots of filming and duplicates\n\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor idx in cleaner.delete(): cleaner.fns[idx].unlink()\nfor idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)\n\n\ndl_train = scenes.dataloaders(path, shuffle=True, val_shuffle=True)\ndl_train.valid.show_batch(max_n=8, nrows=2)\n\n\n\n\n\nlearn = vision_learner(dl_train, resnet34, metrics=accuracy)\nlearn.fine_tune(8)\n\n\n\n\n\n\n    \n      \n      0.00% [0/1 00:00&lt;?]\n    \n    \n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n\n\n\n    \n      \n      20.00% [1/5 00:01&lt;00:05]\n    \n    \n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.show_results(list(range(0,104,3)))\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_top_losses(6, nrows=2)"
  },
  {
    "objectID": "WesAnderson_or_DavidLynch.html#a-ml-model-to-detect-whether-thats-a-wes-anderson-or-a-david-lynch-movie",
    "href": "WesAnderson_or_DavidLynch.html#a-ml-model-to-detect-whether-thats-a-wes-anderson-or-a-david-lynch-movie",
    "title": "Who Directed That?",
    "section": "",
    "text": "from fastbook import *\nfrom fastai.vision import *\nfrom fastai.vision.widgets import *\nfrom decouple import config, AutoConfig\n\n\n\n\nconfig = AutoConfig(' ')\nkey = config('AZURE_SEARCH_KEY')\n\n\nresults = search_images_bing(key, 'wes anderson bottle rocket scene')\nims = results.attrgot('contentUrl')\nlen(ims)\n\n145\n\n\n\ndest = 'images/bottlerocket.jpg'\ndownload_url(ims[0], dest)\n\n\n\n\n\n\n    \n      \n      100.09% [2531328/2529007 00:02&lt;00:00]\n    \n    \n\n\nPath('images/bottlerocket.jpg')\n\n\n\nim = Image.open(dest)\nim.to_thumb(512,512)\n\n\n\n\n\nwa_movies_train = ['bottle rocket','rushmore','the royal tenebaums', 'the life aquatic with steve zissou',\n            'the darjeeling limited','the grand budapest hotel','asteroid city']\nwa_movies_val = ['the french dispatch','moonrise kingdom',]\n\ndl_movies_train = ['eraserhead','the elephant man','wild at heart',\n            'twin peaks','lost highway','inland empire']\ndl_movies_val = ['mulholland drive','blue velvet',]\n\npath = Path('movies')\n\n\nif not path.exists():\n    path.mkdir()\ntrain_path = (path/'training')\nif not train_path.exists():\n    train_path.mkdir()\n    for o in wa_movies_train:\n        dest = (train_path/'wesanderson')\n        dest.mkdir(exist_ok=True)\n        results = search_images_bing(key, f'wes anderson {o} scene', max_images=30)\n        download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nfor o in dl_movies_train:\n    dest = (train_path/'davidlynch')\n    dest.mkdir(exist_ok=True)\n    results = search_images_bing(key, f'david lynch {o} scene', max_images=30)\n    download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nval_path = (path/'validation')\nif not val_path.exists():\n    val_path.mkdir()\n    for o in wa_movies_val:\n        dest = (val_path/'wesanderson')\n        dest.mkdir(exist_ok=True)\n        results = search_images_bing(key, f'wes anderson {o} scene', max_images=30)\n        download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nfor o in dl_movies_val:\n    dest = (val_path/'davidlynch')\n    dest.mkdir(exist_ok=True)\n    results = search_images_bing(key, f'david lynch {o} scene', max_images=30)\n    download_images(dest, urls=results.attrgot('contentUrl'))\n\n\nfns = get_image_files(path)\nfns\n\n(#496) [Path('movies/training/davidlynch/f921cd00-d30c-4f7d-aef7-113690751300.png'),Path('movies/training/davidlynch/8a260340-4743-48bf-9c17-b79ff510fb33.jpg'),Path('movies/training/davidlynch/c0e96632-e024-45a1-a962-e24bdd6a3309.jpg'),Path('movies/training/davidlynch/b9d4df96-874b-4ea8-bbfd-17117687f1f4.png'),Path('movies/training/davidlynch/866b49e4-5f9b-4210-968f-b844fea2fa82.jpg'),Path('movies/training/davidlynch/bab863b6-6af3-4237-83d1-c6a3261d3a59.jpg'),Path('movies/training/davidlynch/3186b311-112f-4e01-8eaa-f1d7c56bd6c4.jpg'),Path('movies/training/davidlynch/75fc8e5d-cbbc-41a4-85fb-4efb99d3d4ed.jpg'),Path('movies/training/davidlynch/a0498206-ca77-4016-a80f-78bcab06819f.png'),Path('movies/training/davidlynch/e63f7b05-0fbd-4296-90e5-b97a7c953a4e.jpeg')...]\n\n\n\nfailed = verify_images(fns)\nfailed\n\n(#25) [Path('movies/training/davidlynch/0c7c65c3-5815-49c2-afbd-377c581d0faa.jpg'),Path('movies/training/davidlynch/62dce7bc-9f0e-4028-8fab-89c409e0795a.jpg'),Path('movies/training/davidlynch/eb6e3f70-1533-40ba-954a-09b5d3447380.jpg'),Path('movies/training/davidlynch/94fec574-28da-476e-84f4-dc42357478ba.jpg'),Path('movies/training/davidlynch/ceac1e3e-c6a5-415d-8f07-60cea856a10b.png'),Path('movies/training/davidlynch/d4764947-8917-4891-8a55-e93769a2b857.jpg'),Path('movies/training/wesanderson/a13f7bc0-46b5-4d30-80e8-358d6d5fa3f5.jpg'),Path('movies/training/wesanderson/da038b25-9618-4333-a383-54f6fd83b5d0.png'),Path('movies/training/wesanderson/8c7d6d80-bd4e-40ba-972e-fc3a67d4ade3.jpg'),Path('movies/training/wesanderson/9b54ba25-09b2-4e27-aae7-c58e5179019d.jpg')...]\n\n\n\nfailed.map(Path.unlink);\n\n\n\n\n\nscenes = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=GrandparentSplitter(train_name='training', valid_name='validation'),\n    get_y=parent_label,\n    item_tfms=Resize(256))\n\n\ndl_train = scenes.dataloaders(path, shuffle=True, val_shuffle=True)\n\n\ndl_train.train.show_batch(max_n=8, nrows=2)\n\n\n\n\n\nlearn = vision_learner(dl_train, resnet18, metrics=accuracy)\nlearn.fine_tune(6)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.212527\n0.817278\n0.495327\n00:09\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.611247\n0.270730\n0.495327\n00:10\n\n\n1\n0.519467\n0.258872\n0.495327\n00:10\n\n\n2\n0.393548\n0.240702\n0.495327\n00:10\n\n\n3\n0.316292\n0.261107\n0.495327\n00:10\n\n\n4\n0.259264\n0.272926\n0.495327\n00:10\n\n\n5\n0.222529\n0.273436\n0.495327\n00:10\n\n\n\n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLetâ€™s remove any shots of filming and duplicates\n\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfor idx in cleaner.delete(): cleaner.fns[idx].unlink()\nfor idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)\n\n\ndl_train = scenes.dataloaders(path, shuffle=True, val_shuffle=True)\ndl_train.valid.show_batch(max_n=8, nrows=2)\n\n\n\n\n\nlearn = vision_learner(dl_train, resnet34, metrics=accuracy)\nlearn.fine_tune(8)\n\n\n\n\n\n\n    \n      \n      0.00% [0/1 00:00&lt;?]\n    \n    \n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n\n\n\n    \n      \n      20.00% [1/5 00:01&lt;00:05]\n    \n    \n\n\n\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.show_results(list(range(0,104,3)))\n\n\n\n\n\n\n\n\n\n\n\n\ninterp.plot_top_losses(6, nrows=2)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesnâ€™t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Synagen.github.io",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMay 23, 2023\n\n\nTristan Oâ€™Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]